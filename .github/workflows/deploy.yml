name: Docker Deploy  # Название workflow

on:
  push:
    branches:
      - main
      - stage

jobs:
  # Job 1: Сборка Docker образов
  build:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v3

      # Шаг 2: Настройка Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Шаг 3: Логин в Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Сборка и загрузка образов для 'stage'
      - name: Build and push images for stage
        if: github.ref == 'refs/heads/stage'
        run: |
          docker build -t vovan2101/yocto-bot:stage -f ./bot/Dockerfile ./bot
          docker push vovan2101/yocto-bot:stage
          docker build -t vovan2101/yocto-app:stage -f ./app/Dockerfile ./app
          docker push vovan2101/yocto-app:stage

      # Сборка и загрузка образов для 'main'
      - name: Build and push images for prod
        if: github.ref == 'refs/heads/main'
        run: |
          docker build -t vovan2101/yocto-bot:prod -f ./bot/Dockerfile ./bot
          docker push vovan2101/yocto-bot:prod
          docker build -t vovan2101/yocto-app:prod -f ./app/Dockerfile ./app
          docker push vovan2101/yocto-app:prod

  # Job 2: Деплой
  deploy:
    runs-on: ubuntu-latest
    needs: build  # Этот параметр гарантирует, что деплой начнется только после успешного завершения сборки

    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v3

      # Шаг 2: Настройка SSH для деплоя
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY_MAIN }}
            ${{ secrets.SSH_PRIVATE_KEY_STAGE }}

      # Шаг 3: Установка хоста и пользователя для каждой ветки
      - name: Set environment based on branch
        id: set-env
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "HOST=${{ secrets.SERVER_HOST_MAIN }}" >> $GITHUB_ENV
            echo "SSH_USER=${{ secrets.SERVER_USER }}" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/stage" ]; then
            echo "HOST=${{ secrets.SERVER_HOST_STAGE }}" >> $GITHUB_ENV
            echo "SSH_USER=${{ secrets.SERVER_USER }}" >> $GITHUB_ENV
          fi

      # Шаг 4: Деплой с использованием docker-compose и переменных окружения
      - name: Deploy with docker-compose and environment variables
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$HOST << 'EOF'
            cd ~/yocto # Укажите правильный путь к проекту на сервере
            git pull origin ${{ github.ref_name }}  # Обновить код

            # Экспортируем переменные окружения из GitHub Secrets
            export YAHOO_EMAIL=${{ secrets.YAHOO_EMAIL }}
            export YAHOO_APP_PASSWORD=${{ secrets.YAHOO_APP_PASSWORD }}

            # Обновить образы и перезапустить сервисы с переменными окружения
            docker-compose pull  # Подтянуть последние версии образов
            docker-compose up -d --remove-orphans  # Перезапустить контейнеры
          EOF